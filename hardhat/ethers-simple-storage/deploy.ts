/// <reference types="node" />
import { ethers } from "ethers";
//import * as fs from "fs-extra"
import * as fs from "fs";
async function main() {
  //HTTP://127.0.0.1:7545
  const provider = new ethers.JsonRpcProvider("http://127.0.0.1:7545");
  const wallet = new ethers.Wallet(
    "0xf52e2ea1cfe7c1eae4999f13f1caa6574ff9f2e3c4e428f9b57748c0f32d23d3",
    provider
  );
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  console.log(`abi: ${abi}`);
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );

  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("deploying..., please wait");
  const contract = await contractFactory.deploy();
  const deploymentReceipt = await contract.deploymentTransaction()?.wait(1);
  console.log(deploymentReceipt);
  const address = await contract.getAddress();
  console.log(`Contract deployed to ${address}`);

  let response = await //contract!.connect(signer!) as ethers.Contract
  (contract as ethers.Contract).retreive();
  console.log(`currNum: ${response}`);
  console.log("update favoriteNumber...");
  const txResponse = await (contract as ethers.Contract).store(77);
  const txReceipt = await txResponse.wait(1);
  response = await //contract!.connect(signer!) as ethers.Contract
  (contract as ethers.Contract).retreive();
  console.log(`currNum: ${response}`);

  // const nonce = await wallet.getNonce();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: "20000000000",
  //   gasLimit: "1000000",
  //   to: null,
  //   value: 0,
  //   data: "0x608060405234801561001057600080fd5b506106bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636057361d14610051578063795fff1d1461006d5780639e7a13ad14610089578063b05784b8146100ba575b600080fd5b61006b600480360381019061006691906103bb565b6100d8565b005b6100876004803603810190610082919061035f565b6100e2565b005b6100a3600480360381019061009e91906103bb565b610172565b6040516100b1929190610478565b60405180910390f35b6100c261022e565b6040516100cf91906104a8565b60405180910390f35b8060008190555050565b60016040518060400160405280848152602001838152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001908051906020019061013e929190610237565b506020820151816001015550508060028360405161015c9190610461565b9081526020016040518091039020819055505050565b6001818154811061018257600080fd5b90600052602060002090600202016000915090508060000180546101a59061058c565b80601f01602080910402602001604051908101604052809291908181526020018280546101d19061058c565b801561021e5780601f106101f35761010080835404028352916020019161021e565b820191906000526020600020905b81548152906001019060200180831161020157829003601f168201915b5050505050908060010154905082565b60008054905090565b8280546102439061058c565b90600052602060002090601f01602090048101928261026557600085556102ac565b82601f1061027e57805160ff19168380011785556102ac565b828001600101855582156102ac579182015b828111156102ab578251825591602001919060010190610290565b5b5090506102b991906102bd565b5090565b5b808211156102d65760008160009055506001016102be565b5090565b60006102ed6102e8846104e8565b6104c3565b90508281526020810184848401111561030957610308610652565b5b61031484828561054a565b509392505050565b600082601f8301126103315761033061064d565b5b81356103418482602086016102da565b91505092915050565b60008135905061035981610672565b92915050565b600080604083850312156103765761037561065c565b5b600083013567ffffffffffffffff81111561039457610393610657565b5b6103a08582860161031c565b92505060206103b18582860161034a565b9150509250929050565b6000602082840312156103d1576103d061065c565b5b60006103df8482850161034a565b91505092915050565b60006103f382610519565b6103fd8185610524565b935061040d818560208601610559565b61041681610661565b840191505092915050565b600061042c82610519565b6104368185610535565b9350610446818560208601610559565b80840191505092915050565b61045b81610540565b82525050565b600061046d8284610421565b915081905092915050565b6000604082019050818103600083015261049281856103e8565b90506104a16020830184610452565b9392505050565b60006020820190506104bd6000830184610452565b92915050565b60006104cd6104de565b90506104d982826105be565b919050565b6000604051905090565b600067ffffffffffffffff8211156105035761050261061e565b5b61050c82610661565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b8381101561057757808201518184015260208101905061055c565b83811115610586576000848401525b50505050565b600060028204905060018216806105a457607f821691505b602082108114156105b8576105b76105ef565b5b50919050565b6105c782610661565b810181811067ffffffffffffffff821117156105e6576105e561061e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61067b81610540565b811461068657600080fd5b5056fea26469706673582212206a03c186859c8927586e8856683290947984d4fe75153a797882021a9d4be4a564736f6c63430008070033",
  //   //chainId: 5777,
  //   chainId: 1337,
  // };
  // // const signResponse = await wallet.signTransaction(tx);
  // // console.log("signResponse: ", signResponse);
  // const sentResponse = await wallet.sendTransaction(tx);
  // await sentResponse.wait(1);
  // console.log(sentResponse);
}

main()
  .then(() => {
    process.exit(0);
  })
  .catch((err) => {
    console.error(err);
    process.exit(1);
  });
